(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils ListUtils IntUtils
library GearNFT

type Operation =
| Add
| Sub

(* Heroes type *)
type HeroesTrait =
| HeroesTrait of String String String (List String)

(* Batch Param type *)
type BatchParam =
| BatchParam of ByStr20 String Uint256 Bool

(* Global variables *)
let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True
let zero = Uint256 0
let one = Uint256 1
let three = Uint256 3
let four = Uint256 4
let two = Uint256 2
let five = Uint256 5
let six = Uint256 6
let seven = Uint256 7
let eight = Uint256 8
let nine = Uint256 9
let ten = Uint256 10
let eleven = Uint256 11
let twelve = Uint256 12
let thirteen = Uint256 13
let fourteen = Uint256 14
let fifteen = Uint256 15
let sixteen = Uint256 16
let eighteen = Uint256 18
let twenty = Uint256 20
let thirty = Uint256 30
let fourty = Uint256 40
let fifty = Uint256 50
let hundred = Uint256 100
let eighty = Uint256 80
let eighty_six = Uint256 86
let seventy = Uint256 70
let ninety_one = Uint256 91
let ninety_five = Uint256 95
let ninety_eight = Uint256 98
let hundred_thirty_one = Uint256 131
let hundred_twenty_one = Uint256 121
let hundred_sixty_one = Uint256 161
let hundred_seventy_one = Uint256 171
let two_hundred_one = Uint256 201
let empty_string = ""
let pro = "%"

let add_operation = Add
let sub_operation = Sub
let min_fee_bps = Uint128 1
let max_fee_bps = Uint128 10000

(* Library functions *)
let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1: Message) =>
  fun (msg2: Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let get_bal =
  fun (maybe_bal: Option Uint256) =>
    match maybe_bal with
    | None => zero
    | Some bal => bal
    end

(* Error exception *)
type Error =
  | NotPausedError
  | PausedError
  | SelfError
  | NotContractOwnerError
  | NotContractOwnershipRecipientError
  | NotTokenOwnerError
  | NotMinterError
  | NotOwnerOrOperatorError
  | MinterNotFoundError
  | MinterFoundError
  | SpenderFoundError
  | OperatorNotFoundError
  | OperatorFoundError
  | NotAllowedToTransferError
  | TokenNotFoundError
  | InvalidFeeBPSError
  | ZeroAddressDestinationError
  | ThisAddressDestinationError

type GearType =
  | Weapon
  | Helmet
  | Armor
  | Shoes
  | Neclace
  | Ring


type GearLevelType =
  | Level1
  | Level2
  | Level3
  | Level4
  | Level5

type  SubstatType =
  | ATK
  | ATKP
  | DEF
  | DEFP
  | HP
  | HPP
  | SPD
  | CRIT_DMGP
  | CRIT_RATEP
  | ACCP
  | RESP

type NameAndGearType = 
  | NameAndGearType of String GearType

let make_error =
  fun (result: Error) =>
    let result_code =
      match result with
      | NotPausedError                     => Int32 -1
      | PausedError                        => Int32 -2
      | SelfError                          => Int32 -3
      | NotContractOwnerError              => Int32 -4
      | NotTokenOwnerError                 => Int32 -5
      | NotMinterError                     => Int32 -6
      | NotOwnerOrOperatorError            => Int32 -7
      | MinterNotFoundError                => Int32 -8
      | MinterFoundError                   => Int32 -9
      | SpenderFoundError                  => Int32 -10
      | OperatorNotFoundError              => Int32 -11
      | OperatorFoundError                 => Int32 -12
      | NotAllowedToTransferError          => Int32 -13
      | TokenNotFoundError                 => Int32 -14
      | InvalidFeeBPSError                 => Int32 -15
      | ZeroAddressDestinationError        => Int32 -16
      | ThisAddressDestinationError        => Int32 -17
      | NotContractOwnershipRecipientError => Int32 -18
      end
    in
    { _exception: "Error"; code: result_code }


let cons_one_batch =
    fun (to: ByStr20) =>
    fun (is_high_level: Bool) =>
    fun (seed: Uint256) =>
        BatchParam to empty_string seed is_high_level

let cons_all_batch =
    fun (seeds: List (Uint256)) =>
    fun (to: ByStr20) =>
    fun (is_high_level: Bool) =>
        let f = cons_one_batch to is_high_level in
        let batch_list_uint256 = @list_map Uint256 BatchParam in
        batch_list_uint256 f seeds

let cons_one_substat =
  fun (param1: String) =>
    let nil = Nil {String} in
      Cons {String} param1 nil

let cons_two_substat =
  fun (param1: String) =>
  fun (param2: String) =>
    let l1 = cons_one_substat param1 in
      Cons {String} param2 l1

let cons_three_substat =
  fun (param1: String) =>
  fun (param2: String) =>
  fun (param3: String) =>
    let l1 = cons_two_substat param1 param2 in
      Cons {String} param3 l1


let cons_four_substat =
  fun (param1: String) =>
  fun (param2: String) =>
  fun (param3: String) =>
  fun (param4: String) =>
    let l1 = cons_three_substat param1 param2 param3 in
      Cons {String} param4 l1

let cons_five_substat =
  fun (param1: String) =>
  fun (param2: String) =>
  fun (param3: String) =>
  fun (param4: String) =>
  fun (param5: String) =>
    let l1 = cons_four_substat param1 param2 param3 param4 in
      Cons {String} param5 l1

let cons_six_substat =
  fun (param1: String) =>
  fun (param2: String) =>
  fun (param3: String) =>
  fun (param4: String) =>
  fun (param5: String) =>
  fun (param6: String) =>
    let l1 = cons_five_substat param1 param2 param3 param4 param5 in
      Cons {String} param6 l1


let get_mainstat =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
    let restSeven = builtin rem seed seven in
    let is_zero_seven = builtin eq restSeven zero in
    let is_one_seven = builtin eq restSeven one in
    let is_two_seven = builtin eq restSeven two in
    let is_three_seven = builtin eq restSeven three in
    let is_four_seven = builtin eq restSeven four in
    let is_five_seven = builtin eq restSeven five in
    let restEight = builtin rem seed eight in
    let is_zero_eight = builtin eq restEight zero in
    let is_one_eight = builtin eq restEight one in
    let is_two_eight = builtin eq restEight two in
    let is_three_eight = builtin eq restEight three in
    let is_four_eight = builtin eq restEight four in
    let is_five_eight = builtin eq restEight five in
    let is_six_eight = builtin eq restEight six in
    match gear_type with
    | Weapon => "ATTACK"
    | Helmet => "HP"
    | Armor => "DEF"
    | Shoes =>
      match is_zero_seven with
      | True => "SPD"
      | False =>
        match is_one_seven with
        | True => "ATK"
        | False =>
          match is_two_seven with
          | True => "ATK%"
          | False =>
            match is_three_seven with
            | True => "HP"
            | False =>
              match is_four_seven with
              | True => "HP%"
              | False =>
                match is_five_seven with
                | True => "DEF"
                | False => "DEF%"
                end
              end
            end
          end
        end
      end
    | Neclace =>
      match is_zero_eight with
      | True => "Crit.Rate%"
      | False =>
        match is_one_eight with
        | True => "Crit.DMG%"
        | False =>
          match is_two_eight with
          | True => "ATK%"
          | False =>
            match is_three_eight with
            | True => "ATK"
            | False =>
              match is_four_eight with
              | True => "HP"
              | False =>
                match is_five_eight with
                | True => "HP%"
                | False =>
                  match is_six_eight with
                  | True => "DEF"
                  | False => "DEF%"
                  end
                end
              end
            end
          end
        end
      end
    | Ring =>
      match is_zero_eight with
      | True => "ACC"
      | False =>
        match is_one_eight with
        | True => "RES"
        | False =>
          match is_two_eight with
          | True => "ATK"
          | False =>
            match is_three_eight with
            | True => "ATK%"
            | False =>
              match is_four_eight with
              | True => "HP%"
              | False =>
                match is_five_eight with
                | True => "HP"
                | False =>
                  match is_six_eight with
                  | True => "DEF"
                  | False => "DEF%"
                  end
                end
              end
            end
          end
        end
      end
    end


let get_formatted_substat =
  fun (seed: Uint256) =>
  fun (range_num: Uint256) =>
  fun (default_num: Uint256) =>
  fun (is_pro: Bool) =>
  fun (substat_type: String) =>
    match is_pro with
    | True =>
      let rand_num = builtin rem seed range_num in
      let substat_num = builtin add rand_num default_num in
      let substat_num_string = builtin to_string substat_num in
      let substat_num_string_pro = builtin concat substat_num_string pro in
      builtin concat substat_type substat_num_string_pro
    | False =>
      let rand_num = builtin rem seed range_num in
      let substat_num = builtin add rand_num default_num in
      let substat_num_string = builtin to_string substat_num in
      builtin concat substat_type substat_num_string
    end

let get_substat_number =
  fun (lv: GearLevelType) =>
  fun (substat_spec: SubstatType) =>
  fun (seed: Uint256) =>
    match lv with
    | Level3 =>
      match substat_spec with
      | ATK =>
        let substat_type = "ATK " in
        get_formatted_substat seed eighty_six fifteen false substat_type
      | ATKP =>
        let substat_type = "ATK " in
        get_formatted_substat seed five two true substat_type
      | DEF =>
        let substat_type = "DEF " in
        get_formatted_substat seed eighty_six fifteen false substat_type
      | DEFP =>
        let substat_type = "DEF " in
        get_formatted_substat seed five two true substat_type
      | HP =>
        let substat_type = "HP " in
        get_formatted_substat seed hundred_twenty_one thirty false substat_type
      | HPP =>
        let substat_type = "HP " in
        get_formatted_substat seed five two true substat_type
      | SPD =>
        let substat_type = "SPD " in
        get_formatted_substat seed four one false substat_type
      | CRIT_DMGP =>
        let substat_type = "CRIT.DMG " in
        get_formatted_substat seed four three true substat_type
      | CRIT_RATEP =>
        let substat_type = "CRIT.RATE " in
        get_formatted_substat seed four two true substat_type
      | ACCP =>
        let substat_type = "ACC " in
        get_formatted_substat seed five two true substat_type
      | RESP =>
        let substat_type = "RES " in
        get_formatted_substat seed five two true substat_type
      end
    | Level4 =>
      match substat_spec with
      | ATK =>
        let substat_type = "ATK " in
        get_formatted_substat seed hundred_thirty_one twenty false substat_type
      | ATKP =>
        let substat_type = "ATK " in
        get_formatted_substat seed six three true substat_type
      | DEF =>
        let substat_type = "DEF " in
        get_formatted_substat seed hundred_thirty_one twenty false substat_type
      | DEFP =>
        let substat_type = "DEF " in
        get_formatted_substat seed six three true substat_type
      | HP =>
        let substat_type = "HP " in
        get_formatted_substat seed hundred_sixty_one fourty false substat_type
      | HPP =>
        let substat_type = "HP " in
        get_formatted_substat seed six three true substat_type
      | SPD =>
        let substat_type = "SPD " in
        get_formatted_substat seed five one false substat_type
      | CRIT_DMGP =>
        let substat_type = "CRIT.DMG " in
        get_formatted_substat seed five three true substat_type
      | CRIT_RATEP =>
        let substat_type = "CRIT.RATE " in
        get_formatted_substat seed four three true substat_type
      | ACCP =>
        let substat_type = "ACC " in
        get_formatted_substat seed six three true substat_type
      | RESP =>
        let substat_type = "RES " in
        get_formatted_substat seed six three true substat_type
      end
    | Level5 =>
      match substat_spec with
      | ATK =>
        let substat_type = "ATK " in
        get_formatted_substat seed hundred_seventy_one thirty false substat_type
      | ATKP =>
        let substat_type = "ATK " in
        get_formatted_substat seed seven four true substat_type
      | DEF =>
        let substat_type = "DEF " in
        get_formatted_substat seed hundred_seventy_one thirty false substat_type
      | DEFP =>
        let substat_type = "DEF " in
        get_formatted_substat seed seven four true substat_type
      | HP =>
        let substat_type = "HP " in
        get_formatted_substat seed two_hundred_one fifty false substat_type
      | HPP =>
        let substat_type = "HP " in
        get_formatted_substat seed seven four true substat_type
      | SPD =>
        let substat_type = "SPD " in
        get_formatted_substat seed five two false substat_type
      | CRIT_DMGP =>
        let substat_type = "CRIT.DMG " in
        get_formatted_substat seed five four true substat_type
      | CRIT_RATEP =>
        let substat_type = "CRIT.RATE " in
        get_formatted_substat seed five three true substat_type
      | ACCP =>
        let substat_type = "ACC " in
        get_formatted_substat seed seven four true substat_type
      | RESP =>
        let substat_type = "RES " in
        get_formatted_substat seed seven four true substat_type
      end
    | _ =>
      match substat_spec with
        | ATK =>
          let substat_type = "ATK " in
          get_formatted_substat seed ninety_one ten false substat_type
        | ATKP =>
          let substat_type = "ATK " in
          get_formatted_substat seed four one true substat_type
        | DEF =>
          let substat_type = "DEF " in
          get_formatted_substat seed ninety_one ten false substat_type
        | DEFP =>
          let substat_type = "DEF " in
          get_formatted_substat seed four one true substat_type
        | HP =>
          let substat_type = "HP " in
          get_formatted_substat seed hundred_thirty_one twenty false substat_type
        | HPP =>
          let substat_type = "HP " in
          get_formatted_substat seed four one true substat_type
        | SPD =>
          let substat_type = "SPD " in
          get_formatted_substat seed three one false substat_type
        | CRIT_DMGP =>
          let substat_type = "CRIT.DMG " in
          get_formatted_substat seed three three true substat_type
        | CRIT_RATEP =>
          let substat_type = "CRIT.RATE " in
          get_formatted_substat seed three two true substat_type
        | ACCP =>
          let substat_type = "ACC " in
          get_formatted_substat seed four one true substat_type
        | RESP =>
          let substat_type = "RES " in
          get_formatted_substat seed four one true substat_type
      end
    end




let get_substat =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
  fun (lv: GearLevelType) =>
    let restEight = builtin rem seed eight in
    let is_zero_eight = builtin eq restEight zero in
    let is_one_eight = builtin eq restEight one in
    let is_two_eight = builtin eq restEight two in
    let is_three_eight = builtin eq restEight three in
    let is_four_eight = builtin eq restEight four in
    let is_five_eight = builtin eq restEight five in
    let is_six_eight = builtin eq restEight six in

    let restEleven = builtin rem seed eleven in
    let is_zero_eleven = builtin eq restEleven zero in
    let is_one_eleven = builtin eq restEleven one in
    let is_two_eleven = builtin eq restEleven two in
    let is_three_eleven = builtin eq restEleven three in
    let is_four_eleven = builtin eq restEleven four in
    let is_five_eleven = builtin eq restEleven five in
    let is_six_eleven = builtin eq restEleven six in
    let is_seven_eleven = builtin eq restEleven seven in
    let is_eight_eleven = builtin eq restEleven eight in
    let is_nine_eleven = builtin eq restEleven nine in

    match gear_type with
    | Weapon =>
      match is_zero_eight with
      | True =>
        let substat_spec = ATKP in
        get_substat_number lv substat_spec seed
      | False =>
        match is_one_eight with
        | True =>
          let substat_spec = HP in
          get_substat_number lv substat_spec seed
        | False =>
          match is_two_eight with
          | True =>
            let substat_spec = HPP in
            get_substat_number lv substat_spec seed
          | False =>
            match is_three_eight with
            | True =>
              let substat_spec = SPD in
              get_substat_number lv substat_spec seed
            | False =>
              match is_four_eight with
              | True =>
                let substat_spec = CRIT_RATEP in
                get_substat_number lv substat_spec seed
              | False =>
                match is_five_eight with
                | True =>
                  let substat_spec = CRIT_DMGP in
                  get_substat_number lv substat_spec seed
                | False =>
                  match is_six_eight with
                  | True =>
                    let substat_spec = ACCP in
                    get_substat_number lv substat_spec seed
                  | False =>
                    let substat_spec = RESP in
                    get_substat_number lv substat_spec seed
                  end
                end
              end
            end
          end
        end
      end
    | Helmet =>
      match is_zero_eleven with
      | True =>
        let substat_spec = ATKP in
        get_substat_number lv substat_spec seed
      | False =>
        match is_one_eleven with
        | True =>
          let substat_spec = ATK in
          get_substat_number lv substat_spec seed
        | False =>
          match is_two_eleven with
          | True =>
            let substat_spec = HP in
            get_substat_number lv substat_spec seed
          | False =>
            match is_three_eleven with
            | True =>
              let substat_spec = HPP in
              get_substat_number lv substat_spec seed
            | False =>
              match is_four_eleven with
              | True =>
                let substat_spec = DEF in
                get_substat_number lv substat_spec seed
              | False =>
                match is_five_eleven with
                | True =>
                  let substat_spec = DEFP in
                  get_substat_number lv substat_spec seed
                | False =>
                  match is_six_eleven with
                  | True =>
                    let substat_spec = SPD in
                    get_substat_number lv substat_spec seed
                  | False =>
                    match is_seven_eleven with
                    | True =>
                      let substat_spec = CRIT_RATEP in
                      get_substat_number lv substat_spec seed
                    | False =>
                      match is_eight_eleven with
                      | True =>
                        let substat_spec = CRIT_DMGP in
                        get_substat_number lv substat_spec seed
                      | False =>
                        match is_nine_eleven with
                        | True =>
                          let substat_spec = ACCP in
                          get_substat_number lv substat_spec seed
                        | False =>
                          let substat_spec = RESP in
                          get_substat_number lv substat_spec seed
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    | Armor =>
      match is_zero_eight with
      | True =>
        let substat_spec = HP in
        get_substat_number lv substat_spec seed
      | False =>
        match is_one_eight with
        | True =>
          let substat_spec = HPP in
          get_substat_number lv substat_spec seed
        | False =>
          match is_two_eight with
          | True =>
            let substat_spec = DEFP in
            get_substat_number lv substat_spec seed
          | False =>
            match is_three_eight with
            | True =>
              let substat_spec = SPD in
              get_substat_number lv substat_spec seed
            | False =>
              match is_four_eight with
              | True =>
                let substat_spec = CRIT_RATEP in
                get_substat_number lv substat_spec seed
              | False =>
                match is_five_eight with
                | True =>
                  let substat_spec = CRIT_DMGP in
                  get_substat_number lv substat_spec seed
                | False =>
                  match is_six_eight with
                  | True =>
                    let substat_spec = ACCP in
                    get_substat_number lv substat_spec seed
                  | False =>
                    let substat_spec = RESP in
                    get_substat_number lv substat_spec seed
                  end
                end
              end
            end
          end
        end
      end
    | Shoes =>
      match is_zero_eleven with
      | True =>
        let substat_spec = ATKP in
        get_substat_number lv substat_spec seed
      | False =>
        match is_one_eleven with
        | True =>
          let substat_spec = ATK in
          get_substat_number lv substat_spec seed
        | False =>
          match is_two_eleven with
          | True =>
            let substat_spec = HP in
            get_substat_number lv substat_spec seed
          | False =>
            match is_three_eleven with
            | True =>
              let substat_spec = HPP in
              get_substat_number lv substat_spec seed
            | False =>
              match is_four_eleven with
              | True =>
                let substat_spec = DEF in
                get_substat_number lv substat_spec seed
              | False =>
                match is_five_eleven with
                | True =>
                  let substat_spec = DEFP in
                  get_substat_number lv substat_spec seed
                | False =>
                  match is_six_eleven with
                  | True =>
                    let substat_spec = SPD in
                    get_substat_number lv substat_spec seed
                  | False =>
                    match is_seven_eleven with
                    | True =>
                      let substat_spec = CRIT_RATEP in
                      get_substat_number lv substat_spec seed
                    | False =>
                      match is_eight_eleven with
                      | True =>
                        let substat_spec = CRIT_DMGP in
                        get_substat_number lv substat_spec seed
                      | False =>
                        match is_nine_eleven with
                        | True =>
                          let substat_spec = ACCP in
                          get_substat_number lv substat_spec seed
                        | False =>
                          let substat_spec = RESP in
                          get_substat_number lv substat_spec seed
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    | Neclace =>
      match is_zero_eleven with
      | True =>
        let substat_spec = ATKP in
        get_substat_number lv substat_spec seed
      | False =>
        match is_one_eleven with
        | True =>
          let substat_spec = ATK in
          get_substat_number lv substat_spec seed
        | False =>
          match is_two_eleven with
          | True =>
            let substat_spec = HP in
            get_substat_number lv substat_spec seed
          | False =>
            match is_three_eleven with
            | True =>
              let substat_spec = HPP in
              get_substat_number lv substat_spec seed
            | False =>
              match is_four_eleven with
              | True =>
                let substat_spec = DEF in
                get_substat_number lv substat_spec seed
              | False =>
                match is_five_eleven with
                | True =>
                  let substat_spec = DEFP in
                  get_substat_number lv substat_spec seed
                | False =>
                  match is_six_eleven with
                  | True =>
                    let substat_spec = SPD in
                    get_substat_number lv substat_spec seed
                  | False =>
                    match is_seven_eleven with
                    | True =>
                      let substat_spec = CRIT_RATEP in
                      get_substat_number lv substat_spec seed
                    | False =>
                      match is_eight_eleven with
                      | True =>
                        let substat_spec = CRIT_DMGP in
                        get_substat_number lv substat_spec seed
                      | False =>
                        match is_nine_eleven with
                        | True =>
                          let substat_spec = ACCP in
                          get_substat_number lv substat_spec seed
                        | False =>
                          let substat_spec = RESP in
                          get_substat_number lv substat_spec seed
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    | Ring =>
      match is_zero_eleven with
      | True =>
        let substat_spec = ATKP in
        get_substat_number lv substat_spec seed
      | False =>
        match is_one_eleven with
        | True =>
          let substat_spec = ATK in
          get_substat_number lv substat_spec seed
        | False =>
          match is_two_eleven with
          | True =>
            let substat_spec = HP in
            get_substat_number lv substat_spec seed
          | False =>
            match is_three_eleven with
            | True =>
              let substat_spec = HPP in
              get_substat_number lv substat_spec seed
            | False =>
              match is_four_eleven with
              | True =>
                let substat_spec = DEF in
                get_substat_number lv substat_spec seed
              | False =>
                match is_five_eleven with
                | True =>
                  let substat_spec = DEFP in
                  get_substat_number lv substat_spec seed
                | False =>
                  match is_six_eleven with
                  | True =>
                    let substat_spec = SPD in
                    get_substat_number lv substat_spec seed
                  | False =>
                    match is_seven_eleven with
                    | True =>
                      let substat_spec = CRIT_RATEP in
                      get_substat_number lv substat_spec seed
                    | False =>
                      match is_eight_eleven with
                      | True =>
                        let substat_spec = CRIT_DMGP in
                        get_substat_number lv substat_spec seed
                      | False =>
                        match is_nine_eleven with
                        | True =>
                          let substat_spec = ACCP in
                          get_substat_number lv substat_spec seed
                        | False =>
                          let substat_spec = RESP in
                          get_substat_number lv substat_spec seed
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end





let get_token_trait_lv1 =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
  fun (tokenname: String) =>
    let token_level = "1*" in
    let gear_level = Level1 in
    let mainstat = get_mainstat gear_type seed in
    (* CHAOTIC*)
    let seed1 = builtin div seed hundred in
    let chao_rest_hundred = builtin rem seed1 hundred in
    let chao_is_true = builtin eq chao_rest_hundred zero in
    match chao_is_true with
    | True =>
      let seed2 = builtin div seed1 hundred in
      let substat1 = get_substat gear_type seed2 gear_level in
      let substats = cons_one_substat substat1 in
      HeroesTrait tokenname token_level mainstat substats
    | False =>
      let substats = Nil {String} in
      HeroesTrait tokenname token_level mainstat substats
    end

let get_token_trait_lv2 =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
  fun (tokenname: String) =>
    let token_level = "2*" in
    let gear_level = Level2 in
    let mainstat = get_mainstat gear_type seed in
    let seed1 = builtin div seed hundred in
    let substat1 = get_substat gear_type seed1 gear_level in
    (* CHAOTIC*)
    let seed2 = builtin div seed1 hundred in
    let chao_rest_hundred = builtin rem seed2 hundred in
    let chao_is_true = builtin eq chao_rest_hundred zero in
    match chao_is_true with
    | True =>
      let seed3 = builtin div seed2 hundred in
      let substat2 = get_substat gear_type seed3 gear_level in
      let substats = cons_two_substat substat1 substat2 in
      HeroesTrait tokenname token_level mainstat substats
    | False =>
      let substats = cons_one_substat substat1 in
      HeroesTrait tokenname token_level mainstat substats
    end

let get_token_trait_lv3 =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
  fun (tokenname: String) =>
    let token_level = "3*" in
    let gear_level = Level3 in
    let mainstat = get_mainstat gear_type seed in
    let seed1 = builtin div seed hundred in
    let substat1 = get_substat gear_type seed1 gear_level in
    let seed2 = builtin div seed1 hundred in
    let substat2 = get_substat gear_type seed2 gear_level in
    (* CHAOTIC*)
    let seed3 = builtin div seed2 hundred in
    let chao_rest_hundred = builtin rem seed3 hundred in
    let chao_is_true = builtin eq chao_rest_hundred zero in
    match chao_is_true with
    | True =>
      let seed4 = builtin div seed3 hundred in
      let substat3 = get_substat gear_type seed4 gear_level in
      let substats = cons_three_substat substat1 substat2 substat3 in
      HeroesTrait tokenname token_level mainstat substats
    | False =>
      let substats = cons_two_substat substat1 substat2 in
      HeroesTrait tokenname token_level mainstat substats
    end


let get_token_trait_lv4 =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
  fun (tokenname: String) =>
    let token_level = "4*" in
    let gear_level = Level4 in
    let mainstat = get_mainstat gear_type seed in
    let seed1 = builtin div seed hundred in
    let substat1 = get_substat gear_type seed1 gear_level in
    let seed2 = builtin div seed1 hundred in
    let substat2 = get_substat gear_type seed2 gear_level in
    let seed3 = builtin div seed2 hundred in
    let substat3 = get_substat gear_type seed3 gear_level in

    (* CHAOTIC*)
    let seed4 = builtin div seed3 hundred in
    let chao_rest_hundred = builtin rem seed4 hundred in
    let chao_is_true = builtin eq chao_rest_hundred zero in
    match chao_is_true with
    | True =>
      let seed5 = builtin div seed4 hundred in
      let substat4 = get_substat gear_type seed5 gear_level in
      let substats = cons_four_substat substat1 substat2 substat3 substat4 in
      HeroesTrait tokenname token_level mainstat substats
    | False =>
      let substats = cons_three_substat substat1 substat2 substat3 in
      HeroesTrait tokenname token_level mainstat substats
    end


let get_bonus_trait =
  fun (seed: Uint256) =>
    let rest_seven = builtin rem seed seven in
    let is_zero = builtin eq rest_seven zero in
    let is_one = builtin eq rest_seven one in
    let is_two = builtin eq rest_seven two in
    let is_three = builtin eq rest_seven three in
    let is_four = builtin eq rest_seven four in
    let is_five = builtin eq rest_seven five in
    match is_zero with
    | True => "Life Set"
    | False =>
      match is_one with
      | True => "Harden Set"
      | False =>
        match is_two with
        | True => "Strength Set"
        | False =>
          match is_three with
          | True => "Degenerate Set"
          | False =>
            match is_four with
            | True => "Effectiveness Set"
            | False =>
              match is_five with
              | True => "Explosion Set"
              | False => "Vampire Set"
              end
            end
          end
        end
      end
    end
let get_token_trait_lv5 =
  fun (gear_type: GearType) =>
  fun (seed: Uint256) =>
  fun (tokenname: String) =>
    let token_level = "5*" in
    let gear_level = Level5 in
    let mainstat = get_mainstat gear_type seed in
    let seed1 = builtin div seed hundred in
    let substat1 = get_substat gear_type seed1 gear_level in
    let seed2 = builtin div seed1 hundred in
    let substat2 = get_substat gear_type seed2 gear_level in
    let seed3 = builtin div seed2 hundred in
    let substat3 = get_substat gear_type seed3 gear_level in
    let seed4 = builtin div seed3 hundred in
    let substat4 = get_substat gear_type seed4 gear_level in

    let seed5 = builtin div seed4 hundred in
    let bonusstat = get_bonus_trait seed5 in
    (* CHAOTIC*)
    let seed6 = builtin div seed5 hundred in
    let chao_rest_hundred = builtin rem seed6 hundred in
    let chao_is_true = builtin eq chao_rest_hundred zero in
    match chao_is_true with
    | True =>
      let seed7 = builtin div seed6 hundred in
      let substat5 = get_substat gear_type seed7 gear_level in
      let substats = cons_six_substat substat1 substat2 substat3 substat4 substat5 bonusstat in
      HeroesTrait tokenname token_level mainstat substats
    | False =>
      let substats = cons_five_substat substat1 substat2 substat3 substat4 bonusstat in
      HeroesTrait tokenname token_level mainstat substats
    end


contract GearNFT
(
  initial_contract_owner: ByStr20,
  initial_base_uri: String,
  name: String,
  symbol: String
)

(* Contract constraints *)
with
  let is_contract_owner_invalid = builtin eq initial_contract_owner zero_address in
  let is_name_invalid = builtin eq name empty_string in
  let is_symbol_invalid = builtin eq symbol empty_string in
  let is_name_or_symbol_invalid = orb is_name_invalid is_symbol_invalid in

  let is_invalid = orb is_contract_owner_invalid is_name_or_symbol_invalid in
  negb is_invalid
=>

(* Mutable fields *)
field is_paused: Bool = false
field token_name: String = name
field token_symbol: String = symbol
field contract_owner: ByStr20 = initial_contract_owner
field contract_ownership_recipient: ByStr20 = zero_address
field royalty_recipient: ByStr20 = initial_contract_owner
field royalty_fee_bps: Uint128 = Uint128 1000
field base_uri: String = initial_base_uri
field token_uris: Map Uint256 String = Emp Uint256 String
field token_owners: Map Uint256 ByStr20 = Emp Uint256 ByStr20
field token_traits: Map Uint256 HeroesTrait = Emp Uint256 HeroesTrait
field token_id_count: Uint256 = Uint256 0
field total_supply: Uint256 = Uint256 0
field balances: Map ByStr20 Uint256 = Emp ByStr20 Uint256
field minters: Map ByStr20 Bool =
    let emp_map = Emp ByStr20 Bool in
    builtin put emp_map initial_contract_owner true
field spenders: Map Uint256 ByStr20 = Emp Uint256 ByStr20
field operators: Map ByStr20 (Map ByStr20 Bool) = Emp ByStr20 (Map ByStr20 Bool)

procedure Throw(error: Error)
  e = make_error error;
  throw e
end

procedure RequireNotPaused()
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    error = PausedError;
    Throw error
  end
end

procedure RequireValidRoyaltyFee(fee_bps: Uint128)
  is_gte_min = uint128_ge fee_bps min_fee_bps;
  is_lte_max = uint128_le fee_bps max_fee_bps;

  is_valid = andb is_gte_min is_lte_max;
  match is_valid with
    | True =>
    | False =>
      error = InvalidFeeBPSError;
      Throw error
  end
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True =>
  | False =>
    error = NotContractOwnerError;
    Throw error
  end
end

procedure RequireNotSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

procedure RequireExistingToken(token_id: Uint256)
  has_token <- exists token_owners[token_id];
  match has_token with
  | True =>
  | False =>
    error = TokenNotFoundError;
    Throw error
  end
end

procedure RequireValidDestination(to: ByStr20)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressDestinationError;
    Throw error
  end;

  is_this_address = builtin eq to _this_address;
  match is_this_address with
  | False =>
  | True =>
    error = ThisAddressDestinationError;
    Throw error
  end
end

procedure IsMinter(address: ByStr20)
  has_minter <- exists minters[address];
  match has_minter with
  | True =>
  | False =>
    error = NotMinterError;
    Throw error
  end
end

procedure RequireTokenOwner(token_id: Uint256, address: ByStr20)
  maybe_token_owner <- token_owners[token_id];
  match maybe_token_owner with
  | None =>
    error = TokenNotFoundError;
    Throw error
  | Some addr =>
    is_token_owner = builtin eq addr address;
    match is_token_owner with
    | True =>
    | False =>
      error = NotTokenOwnerError;
      Throw error
    end
  end
end

procedure RequireOwnerOrOperator(address: ByStr20)
  is_owner = builtin eq _sender address;
  has_operator <- exists operators[address][_sender];
  is_allowed = orb is_owner has_operator;
  match is_allowed with
  | True =>
  | False =>
    error = NotOwnerOrOperatorError;
    Throw error
  end
end

procedure RequireAccessToTransfer(token_owner: ByStr20, token_id: Uint256)
  is_token_owner = builtin eq token_owner _sender;
  maybe_spender <- spenders[token_id];
  is_spender = match maybe_spender with
    | None => False
    | Some spender =>
      builtin eq spender _sender
    end;
  is_operator <- exists operators[token_owner][_sender];

  is_spender_or_operator = orb is_spender is_operator;
  is_allowed = orb is_spender_or_operator is_token_owner;
  match is_allowed with
  | True =>
  | False =>
    error = NotAllowedToTransferError;
    Throw error
  end
end

procedure UpdateBalance(operation: Operation, address: ByStr20)
  match operation with
  | Add =>
    maybe_count <- balances[address];
    new_count =
      let cur_count = get_bal maybe_count in
      builtin add cur_count one;
    balances[address] := new_count
  | Sub =>
    maybe_count <- balances[address];
    new_count =
      let cur_count = get_bal maybe_count in
      builtin sub cur_count one;
    balances[address] := new_count
  end
end

procedure MintToken(to: ByStr20, seed: Uint256, is_high_level: Bool)
  RequireValidDestination to;

  IsMinter _sender;

  current_token_id_count <- token_id_count;
  new_token_id_count = builtin add current_token_id_count one;
  token_id_count := new_token_id_count;
  token_id = new_token_id_count;

  token_owners[token_id] := to;

  UpdateBalance add_operation to;

  current_supply <- total_supply;
  new_supply = builtin add current_supply one;
  total_supply := new_supply;

  restHundred = builtin rem seed hundred;
  is_less_than_80 = builtin lt restHundred eighty;
  is_less_than_98 = builtin lt restHundred ninety_eight;
  is_less_than_70 = builtin lt restHundred seventy;
  is_less_than_95 = builtin lt restHundred ninety_five;

  restEighteen = builtin rem seed eighteen;
  is_0_18 = builtin eq restEighteen zero;
  is_1_18 = builtin eq restEighteen one;
  is_2_18 = builtin eq restEighteen two;
  is_3_18 = builtin eq restEighteen three;
  is_4_18 = builtin eq restEighteen four;
  is_5_18 = builtin eq restEighteen five;
  is_6_18 = builtin eq restEighteen six;
  is_7_18 = builtin eq restEighteen seven;
  is_8_18 = builtin eq restEighteen eight;
  is_9_18 = builtin eq restEighteen nine;
  is_10_18 = builtin eq restEighteen ten;
  is_11_18 = builtin eq restEighteen eleven;
  is_12_18 = builtin eq restEighteen twelve;
  is_13_18 = builtin eq restEighteen thirteen;
  is_14_18 = builtin eq restEighteen fourteen;
  is_15_18 = builtin eq restEighteen fifteen;
  is_16_18 = builtin eq restEighteen sixteen;

  match is_high_level with
  | True => 
    match is_less_than_80 with
    | True => 
      name_and_type = match is_0_18 with
      | True => 
        let tokenname = "Steel Sword*" in let gear_type = Weapon in
        NameAndGearType tokenname gear_type
      | False =>
        match is_1_18 with
        | True =>
          let tokenname = "Steel Helmet" in let gear_type = Helmet in
          NameAndGearType tokenname gear_type
        | False =>
          match is_2_18 with
          | True =>
            let tokenname = "Steel Armor" in let gear_type = Armor in
            NameAndGearType tokenname gear_type
          | False =>
            match is_3_18 with
            | True =>
              let tokenname = "Steel Shoes" in let gear_type = Shoes in
              NameAndGearType tokenname gear_type
            | False =>
              match is_4_18 with
              | True =>
                let tokenname = "Intermediate Archer Bow" in let gear_type = Weapon in
                NameAndGearType tokenname gear_type
              | False =>
                match is_5_18 with
                | True =>
                  let tokenname = "Light Huntsman Helmet" in let gear_type = Helmet in
                  NameAndGearType tokenname gear_type
                | False =>
                  match is_6_18 with
                  | True =>
                    let tokenname = "Light Huntsman Armor" in let gear_type = Armor in
                    NameAndGearType tokenname gear_type
                  | False =>
                    match is_7_18 with
                    | True =>
                      let tokenname = "Light Huntsman Boots" in let gear_type = Shoes in
                      NameAndGearType tokenname gear_type
                    | False =>
                      match is_8_18 with
                      | True =>
                        let tokenname = "Enchanted Wand" in let gear_type = Weapon in
                        NameAndGearType tokenname gear_type
                      | False =>
                        match is_9_18 with
                        | True =>
                          let tokenname = "Enchanted Silk Cap" in let gear_type = Helmet in
                          NameAndGearType tokenname gear_type
                        | False =>
                          match is_10_18 with
                          | True =>
                            let tokenname = "Enchanted Silk Robe" in let gear_type = Armor in
                            NameAndGearType tokenname gear_type
                          | False =>
                            match is_11_18 with
                            | True =>
                              let tokenname = "Enchanted Silk Shoes" in let gear_type = Shoes in
                              NameAndGearType tokenname gear_type
                            | False =>
                              match is_12_18 with
                              | True =>
                                let tokenname = "Steel Kusarigama" in let gear_type = Weapon in
                                NameAndGearType tokenname gear_type
                              | False =>
                                match is_13_18 with
                                | True =>
                                  let tokenname = "Black Soft Beanie" in let gear_type = Helmet in
                                  NameAndGearType tokenname gear_type
                                | False =>
                                  match is_14_18 with
                                  | True =>
                                    let tokenname = "Black Soft Hoodie" in let gear_type = Armor in
                                    NameAndGearType tokenname gear_type
                                  | False =>
                                    match is_15_18 with
                                    | True =>
                                      let tokenname = "Black Soft Shoes" in let gear_type = Shoes in
                                      NameAndGearType tokenname gear_type
                                    | False =>
                                      match is_16_18 with
                                      | True =>
                                        let tokenname = "Silver Ring" in let gear_type = Ring in
                                        NameAndGearType tokenname gear_type
                                      | False =>
                                        let tokenname = "Silver Necklace" in let gear_type = Neclace in
                                        NameAndGearType tokenname gear_type
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end;
      match name_and_type with
      | NameAndGearType tokenname gear_type =>
      token_trait = get_token_trait_lv3 gear_type seed tokenname;
      token_traits[token_id] := token_trait
      end
    | False =>
      match is_less_than_98 with
      | True =>
        name_and_type = match is_0_18 with
        | True =>
          let tokenname = "Crimson Sword*" in let gear_type = Weapon in
          NameAndGearType tokenname gear_type
        | False =>
          match is_1_18 with
          | True =>
            let tokenname = "Golden Helmet" in let gear_type = Helmet in
            NameAndGearType tokenname gear_type
          | False =>
            match is_2_18 with
            | True =>
              let tokenname = "Golden Armor" in let gear_type = Armor in
              NameAndGearType tokenname gear_type
            | False =>
              match is_3_18 with
              | True =>
                let tokenname = "Golden Shoes" in let gear_type = Shoes in
                NameAndGearType tokenname gear_type
              | False =>
                match is_4_18 with
                | True =>
                  let tokenname = "Crimson Crossbow" in let gear_type = Weapon in
                  NameAndGearType tokenname gear_type
                | False =>
                  match is_5_18 with
                  | True =>
                    let tokenname = "Hardened Leather Helmet" in let gear_type = Helmet in
                    NameAndGearType tokenname gear_type
                  | False =>
                    match is_6_18 with
                    | True =>
                      let tokenname = "Hardened Leather Armor" in let gear_type = Armor in
                      NameAndGearType tokenname gear_type
                    | False =>
                      match is_7_18 with
                      | True =>
                        let tokenname = "Hardened Leather Shoes" in let gear_type = Shoes in
                        NameAndGearType tokenname gear_type
                      | False =>
                        match is_8_18 with
                        | True =>
                          let tokenname = "Crimson Staff" in let gear_type = Weapon in
                          NameAndGearType tokenname gear_type
                        | False =>
                          match is_9_18 with
                          | True =>
                            let tokenname = "Hardened Silk Cap" in let gear_type = Helmet in
                            NameAndGearType tokenname gear_type
                          | False =>
                            match is_10_18 with
                            | True =>
                              let tokenname = "Hardened Silk Robe" in let gear_type = Armor in
                              NameAndGearType tokenname gear_type
                            | False =>
                              match is_11_18 with
                              | True =>
                                let tokenname = "Hardened Silk Shoes" in let gear_type = Shoes in
                                NameAndGearType tokenname gear_type
                              | False =>
                                match is_12_18 with
                                | True =>
                                  let tokenname = "Dual Kusarigama" in let gear_type = Weapon in
                                  NameAndGearType tokenname gear_type
                                | False =>
                                  match is_13_18 with
                                  | True =>
                                    let tokenname = "Enchanted Headband" in let gear_type = Helmet in
                                    NameAndGearType tokenname gear_type
                                  | False =>
                                    match is_14_18 with
                                    | True =>
                                      let tokenname = "Enchanted Light Sweater" in let gear_type = Armor in
                                      NameAndGearType tokenname gear_type
                                    | False =>
                                      match is_15_18 with
                                      | True =>
                                        let tokenname = "Enchanted Light Sneakers" in let gear_type = Shoes in
                                        NameAndGearType tokenname gear_type
                                      | False =>
                                        match is_16_18 with
                                        | True =>
                                          let tokenname = "Gold Ring" in let gear_type = Ring in
                                          NameAndGearType tokenname gear_type
                                        | False =>
                                          let tokenname = "Gold Necklace" in let gear_type = Neclace in
                                          NameAndGearType tokenname gear_type
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end;
        match name_and_type with
        | NameAndGearType tokenname gear_type =>
          token_trait = get_token_trait_lv4 gear_type seed tokenname;
          token_traits[token_id] := token_trait
        end
      | False =>
        name_and_type = match is_0_18 with
        | True =>
          let tokenname = "Lowhelms Infinite Sword*" in let gear_type = Weapon in
          NameAndGearType tokenname gear_type
        | False =>
          match is_1_18 with
          | True =>
            let tokenname = "Lowhelms King Helmet" in let gear_type = Helmet in
            NameAndGearType tokenname gear_type
          | False =>
            match is_2_18 with
            | True =>
              let tokenname = "Lowhelms King Armor" in let gear_type = Armor in
              NameAndGearType tokenname gear_type
            | False =>
              match is_3_18 with
              | True =>
                let tokenname = "Lowhelms King Shoes" in let gear_type = Shoes in
                NameAndGearType tokenname gear_type
              | False =>
                match is_4_18 with
                | True =>
                  let tokenname = "Lowhelms Mythical Bow" in let gear_type = Weapon in
                  NameAndGearType tokenname gear_type
                | False =>
                  match is_5_18 with
                  | True =>
                    let tokenname = "Lowhelms King Hunting Hat" in let gear_type = Helmet in
                    NameAndGearType tokenname gear_type
                  | False =>
                    match is_6_18 with
                    | True =>
                      let tokenname = "Lowhelms King Hunting Suit" in let gear_type = Armor in
                      NameAndGearType tokenname gear_type
                    | False =>
                      match is_7_18 with
                      | True => 
                        let tokenname = "Lowhelms King Hunting Shoes" in let gear_type = Shoes in
                        NameAndGearType tokenname gear_type
                      | False =>
                        match is_8_18 with
                        | True =>
                          let tokenname = "Lowhelms Superior Staff" in let gear_type = Weapon in
                          NameAndGearType tokenname gear_type
                        | False =>
                          match is_9_18 with
                          | True =>
                            let tokenname = "Lowhelms King Wizard Hat" in let gear_type = Helmet in
                            NameAndGearType tokenname gear_type
                          | False =>
                            match is_10_18 with
                            | True =>
                              let tokenname = "Lowhelms King Robe" in let gear_type = Armor in
                              NameAndGearType tokenname gear_type
                            | False =>
                              match is_11_18 with
                              | True =>
                                let tokenname = "Lowhelms King Silk Shoes" in let gear_type = Shoes in
                                NameAndGearType tokenname gear_type
                              | False =>
                                match is_12_18 with
                                | True =>
                                  let tokenname = "Lowhelms Dagger of Fatality" in let gear_type = Weapon in
                                  NameAndGearType tokenname gear_type
                                | False =>
                                  match is_13_18 with
                                  | True =>
                                    let tokenname = "Lowhelms King Headband" in let gear_type = Helmet in
                                    NameAndGearType tokenname gear_type
                                  | False =>
                                    match is_14_18 with
                                    | True =>
                                      let tokenname = "Lowhelms King Ninja Suit" in let gear_type = Armor in
                                      NameAndGearType tokenname gear_type
                                    | False =>
                                      match is_15_18 with
                                      | True =>
                                        let tokenname = "Lowhelms King Ninja Shoes" in let gear_type = Shoes in
                                        NameAndGearType tokenname gear_type
                                      | False =>
                                        match is_16_18 with
                                        | True =>
                                          let tokenname = "Lowhelms King Ring" in let gear_type = Ring in
                                          NameAndGearType tokenname gear_type
                                        | False =>
                                          let tokenname = "Lowhelms King Necklace" in let gear_type = Neclace in
                                          NameAndGearType tokenname gear_type
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end;
        match name_and_type with
        | NameAndGearType tokenname gear_type =>
          token_trait = get_token_trait_lv5 gear_type seed tokenname;
          token_traits[token_id] := token_trait
        end
      end
    end
  | False => (* This case is 1* ~ 3* Gear Summons*)
    match is_less_than_70 with
    | True =>
      name_and_type = match is_0_18 with
      | True =>
        let tokenname = "Wooden Sword*" in let gear_type = Weapon in
        NameAndGearType tokenname gear_type
      | False =>
        match is_1_18 with
        | True =>
          let tokenname = "Copper Helmet" in let gear_type = Helmet in
          NameAndGearType tokenname gear_type
        | False =>
          match is_2_18 with
          | True =>
            let tokenname = "Copper Armor" in let gear_type = Armor in
            NameAndGearType tokenname gear_type
          | False =>
            match is_3_18 with
            | True =>
              let tokenname = "Copper Shoes" in let gear_type = Shoes in
              NameAndGearType tokenname gear_type
            | False =>
              match is_4_18 with
              | True =>
                let tokenname = "Basic Bow" in let gear_type = Weapon in
                NameAndGearType tokenname gear_type
              | False =>
                match is_5_18 with
                | True =>
                  let tokenname = "Leather Helmet" in let gear_type = Helmet in
                  NameAndGearType tokenname gear_type
                | False =>
                  match is_6_18 with
                  | True =>
                    let tokenname = "Leather Armor" in let gear_type = Armor in
                    NameAndGearType tokenname gear_type
                  | False =>
                    match is_7_18 with
                    | True =>
                      let tokenname = "Leather Shoes" in let gear_type = Shoes in
                      NameAndGearType tokenname gear_type
                    | False =>
                      match is_8_18 with
                      | True =>
                        let tokenname = "Basic Wand" in let gear_type = Weapon in
                        NameAndGearType tokenname gear_type
                      | False =>
                        match is_9_18 with
                        | True =>
                          let tokenname = "Silk Cap" in let gear_type = Helmet in
                          NameAndGearType tokenname gear_type
                        | False =>
                          match is_10_18 with
                          | True =>
                            let tokenname = "Silk Robe" in let gear_type = Armor in
                            NameAndGearType tokenname gear_type
                          | False =>
                            match is_11_18 with
                            | True =>
                              let tokenname = "Silk Shoes" in let gear_type = Shoes in
                              NameAndGearType tokenname gear_type
                            | False =>
                              match is_12_18 with
                              | True =>
                                let tokenname = "Basic Dagger" in let gear_type = Weapon in
                                NameAndGearType tokenname gear_type
                              | False =>
                                match is_13_18 with
                                | True =>
                                  let tokenname = "Common Headband" in let gear_type = Helmet in
                                  NameAndGearType tokenname gear_type
                                | False =>
                                  match is_14_18 with
                                  | True =>
                                    let tokenname = "White Shirt" in let gear_type = Armor in
                                    NameAndGearType tokenname gear_type
                                  | False =>
                                    match is_15_18 with
                                    | True =>
                                      let tokenname = "Soft Shoes" in let gear_type = Shoes in
                                      NameAndGearType tokenname gear_type
                                    | False =>
                                      match is_16_18 with
                                      | True =>
                                        let tokenname = "Copper Ring" in let gear_type = Ring in
                                        NameAndGearType tokenname gear_type
                                      | False =>
                                        let tokenname = "Copper Necklace" in let gear_type = Neclace in
                                        NameAndGearType tokenname gear_type
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end;
      match name_and_type with
      | NameAndGearType tokenname gear_type =>
      token_trait = get_token_trait_lv1 gear_type seed tokenname;
      token_traits[token_id] := token_trait
      end
    | False =>
      match is_less_than_95 with
      | True => (* This case is 2**)
        name_and_type = match is_0_18 with
        | True =>
          let tokenname = "Stone Sword*" in let gear_type = Weapon in
          NameAndGearType tokenname gear_type
        | False =>
          match is_1_18 with
          | True => 
            let tokenname = "Bronze Helmet" in let gear_type = Helmet in
            NameAndGearType tokenname gear_type
          | False =>
            match is_2_18 with
            | True =>
              let tokenname = "Bronze Armor" in let gear_type = Armor in
              NameAndGearType tokenname gear_type
            | False =>
              match is_3_18 with
              | True =>
                let tokenname = "Bronze Shoes" in let gear_type = Shoes in
                NameAndGearType tokenname gear_type
              | False =>
                match is_4_18 with
                | True =>
                  let tokenname = "Apprentice Crossbow" in let gear_type = Weapon in
                  NameAndGearType tokenname gear_type
                | False =>
                  match is_5_18 with
                  | True =>
                    let tokenname = "Hardened Leather Helmet" in let gear_type = Helmet in
                    NameAndGearType tokenname gear_type
                  | False =>
                    match is_6_18 with
                    | True =>
                      let tokenname = "Hardened Leather Armor" in let gear_type = Armor in
                      NameAndGearType tokenname gear_type
                    | False =>
                      match is_7_18 with
                      | True =>
                        let tokenname = "Hardened Leather Boots" in let gear_type = Shoes in
                        NameAndGearType tokenname gear_type
                      | False =>
                        match is_8_18 with
                        | True =>
                          let tokenname = "Apprentice Staff" in let gear_type = Weapon in
                          NameAndGearType tokenname gear_type
                        | False =>
                          match is_9_18 with
                          | True =>
                            let tokenname = "Hardened Silk Cap" in let gear_type = Helmet in
                            NameAndGearType tokenname gear_type
                          | False =>
                            match is_10_18 with
                            | True =>
                              let tokenname = "Hardened Silk Robe" in let gear_type = Armor in
                              NameAndGearType tokenname gear_type
                            | False =>
                              match is_11_18 with
                              | True =>
                                let tokenname = "Hardened Silk Shoes" in let gear_type = Shoes in
                                NameAndGearType tokenname gear_type
                              | False =>
                                match is_12_18 with
                                | True =>
                                  let tokenname = "Dual Basic Daggers" in let gear_type = Weapon in
                                  NameAndGearType tokenname gear_type
                                | False =>
                                  match is_13_18 with
                                  | True =>
                                    let tokenname = "Apprentice Headband" in let gear_type = Helmet in
                                    NameAndGearType tokenname gear_type
                                  | False =>
                                    match is_14_18 with
                                    | True =>
                                      let tokenname = "Apprentice Shirt" in let gear_type = Armor in
                                      NameAndGearType tokenname gear_type
                                    | False =>
                                      match is_15_18 with
                                      | True =>
                                        let tokenname = "Apprentice Slippers" in let gear_type = Shoes in
                                        NameAndGearType tokenname gear_type
                                      | False =>
                                        match is_16_18 with
                                        | True =>
                                          let tokenname = "Bronze Ring" in let gear_type = Shoes in
                                          NameAndGearType tokenname gear_type
                                        | False => 
                                          let tokenname = "Bronze Neclace" in let gear_type = Neclace in
                                          NameAndGearType tokenname gear_type
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end;
        match name_and_type with
        | NameAndGearType tokenname gear_type =>
          token_trait = get_token_trait_lv2 gear_type seed tokenname;
          token_traits[token_id] := token_trait
        end
      | False => (* This case is 3**)
        name_and_type = match is_0_18 with
        | True =>
          let tokenname = "Steel Sword*" in let gear_type = Weapon in
          NameAndGearType tokenname gear_type
        | False =>
          match is_1_18 with
          | True =>
            let tokenname = "Steel Helmet" in let gear_type = Helmet in
            NameAndGearType tokenname gear_type
          | False =>
            match is_2_18 with
            | True =>
              let tokenname = "Steel Armor" in let gear_type = Armor in
              NameAndGearType tokenname gear_type
            | False =>
              match is_3_18 with
              | True =>
                let tokenname = "Steel Shoes" in let gear_type = Shoes in
                NameAndGearType tokenname gear_type
              | False =>
                match is_4_18 with
                | True =>
                  let tokenname = "Intermediate Archer Bow" in let gear_type = Weapon in
                  NameAndGearType tokenname gear_type
                | False =>
                  match is_5_18 with
                  | True =>
                    let tokenname = "Light Huntsman Helmet" in let gear_type = Helmet in
                    NameAndGearType tokenname gear_type
                  | False =>
                    match is_6_18 with
                    | True =>
                      let tokenname = "Light Huntsman Armor" in let gear_type = Armor in
                      NameAndGearType tokenname gear_type
                    | False =>
                      match is_7_18 with
                      | True =>
                        let tokenname = "Light Huntsman Boots" in let gear_type = Shoes in
                        NameAndGearType tokenname gear_type
                      | False =>
                        match is_8_18 with
                        | True =>
                          let tokenname = "Enchanted Wand" in let gear_type = Weapon in
                          NameAndGearType tokenname gear_type
                        | False =>
                          match is_9_18 with
                          | True =>
                            let tokenname = "Enchanted Silk Cap" in let gear_type = Helmet in
                            NameAndGearType tokenname gear_type
                          | False =>
                            match is_10_18 with
                            | True => 
                              let tokenname = "Enchanted Silk Robe" in let gear_type = Armor in
                              NameAndGearType tokenname gear_type
                            | False =>
                              match is_11_18 with
                              | True =>
                                let tokenname = "Enchanted Silk Shoes" in let gear_type = Shoes in
                                NameAndGearType tokenname gear_type
                              | False =>
                                match is_12_18 with
                                | True =>
                                  let tokenname = "Steel Kusarigama" in let gear_type = Weapon in
                                  NameAndGearType tokenname gear_type
                                | False =>
                                  match is_13_18 with
                                  | True =>
                                    let tokenname = "Black Soft Beanie" in let gear_type = Helmet in
                                    NameAndGearType tokenname gear_type
                                  | False =>
                                    match is_14_18 with
                                    | True =>
                                      let tokenname = "Black Soft Hoodie" in let gear_type = Armor in
                                      NameAndGearType tokenname gear_type
                                    | False =>
                                      match is_15_18 with
                                      | True =>
                                        let tokenname = "Black Soft Shoes" in let gear_type = Shoes in
                                        NameAndGearType tokenname gear_type
                                      | False =>
                                        match is_16_18 with
                                        | True => 
                                          let tokenname = "Silver Ring" in let gear_type = Ring in
                                          NameAndGearType tokenname gear_type
                                        | False => 
                                          let tokenname = "Silver Necklace" in let gear_type = Neclace in
                                          NameAndGearType tokenname gear_type
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end;
        match name_and_type with
        | NameAndGearType tokenname gear_type =>
          token_trait = get_token_trait_lv3 gear_type seed tokenname;
          token_traits[token_id] := token_trait
        end
      end
    end
  end
end

procedure SetTokenURI(token_id: Uint256, token_uri: String)
  is_empty_string = builtin eq token_uri empty_string;
  match is_empty_string with
  | True =>
    (* noop *)
  | False =>
    token_uris[token_id] := token_uri
  end
end

procedure HandleMint(info: BatchParam)
  match info with
  | BatchParam to token_uri seed is_high_level=>
    MintToken to seed is_high_level;
    token_id <- token_id_count;
    SetTokenURI token_id token_uri
  end
end

procedure BurnToken(token_id: Uint256)
  (* Check if token exists *)
  maybe_token_owner <- token_owners[token_id];
  match maybe_token_owner with
  | None =>
    error = TokenNotFoundError;
    Throw error
  | Some token_owner =>
    RequireOwnerOrOperator token_owner;
    (* Destroy existing token *)
    delete token_owners[token_id];
    delete token_uris[token_id];
    delete spenders[token_id];

    (* subtract one from the balance *)
    UpdateBalance sub_operation token_owner;
    (* subtract one from the total supply *)
    current_supply <- total_supply;
    new_supply = builtin sub current_supply one;
    total_supply := new_supply;

    e = {
      _eventname: "Burn";
      token_owner: token_owner;
      token_id: token_id
    };
    event e
  end
end

procedure TransferToken(to: ByStr20, token_id: Uint256)
  RequireValidDestination to;

  maybe_token_owner <- token_owners[token_id];
  match maybe_token_owner with
  | None =>
    error = TokenNotFoundError;
    Throw error
  | Some token_owner =>
    RequireAccessToTransfer token_owner token_id;
    RequireNotSelf token_owner to;

    token_owners[token_id] := to;

    delete spenders[token_id];

    UpdateBalance sub_operation token_owner;

    UpdateBalance add_operation to;

    e = {
      _eventname: "TransferFrom";
      from: token_owner;
      to: to;
      token_id: token_id
    };
    event e
  end
end

procedure HandleTransfer(info: Pair ByStr20 Uint256)
  match info with
  | Pair to token_id =>
    TransferToken to token_id
  end
end

transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_PauseCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    is_paused: true
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition Unpause()
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    error = NotPausedError;
    Throw error
  end;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_UnpauseCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    is_paused: false
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition SetRoyaltyRecipient(to: ByStr20)
  RequireContractOwner;
  RequireValidDestination to;

  royalty_recipient := to;

  e = {
    _eventname: "SetRoyaltyRecipient";
    to: to
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_SetRoyaltyRecipientCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    to: to
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition SetRoyaltyFeeBPS(fee_bps: Uint128)
  RequireContractOwner;
  RequireValidRoyaltyFee fee_bps;
  royalty_fee_bps := fee_bps;

  e = {
    _eventname: "SetRoyaltyFeeBPS";
    royalty_fee_bps: fee_bps
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_SetRoyaltyFeeBPSCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    royalty_fee_bps: fee_bps
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition SetBaseURI(uri: String)
  RequireContractOwner;
  base_uri := uri;

  e = {
    _eventname: "SetBaseURI";
    base_uri: uri
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_SetBaseURICallback";
    _recipient: _sender;
    _amount: Uint128 0;
    base_uri: uri
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition Mint(to: ByStr20, token_uri: String, seed: Uint256, is_high_level: Bool)
  RequireNotPaused;
  MintToken to seed is_high_level;
  token_id <- token_id_count;
  SetTokenURI token_id token_uri;

  e = {
    _eventname: "Mint";
    to: to;
    token_id: token_id;
    token_uri: token_uri
  };
  event e;
  msg_to_recipient = {
    _tag: "GearNFT_RecipientAcceptMint";
    _recipient: to;
    _amount: Uint128 0
  };
  msg_to_sender = {
    _tag: "GearNFT_MintCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    to: to;
    token_id: token_id;
    token_uri: token_uri
  };
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

transition BatchMint(to: ByStr20, seeds: List (Uint256), is_high_level: Bool)
  RequireNotPaused;
  cur_id <- token_id_count;
  start_id = builtin add cur_id one;
  to_token_uri_pair_list = cons_all_batch seeds to is_high_level;
  forall to_token_uri_pair_list HandleMint;
  end_id <- token_id_count;
  e = {
    _eventname: "GearNFTBatchMint";
    to_token_uri_pair_list: to_token_uri_pair_list;
    start_id: start_id;
    end_id: end_id
  };
  event e;
  msg_to_sender = {
    _tag: "GearNFT_BatchMintCallback";
    _recipient: _sender;
    _amount: Uint128 0
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition Burn(token_id: Uint256)
  RequireNotPaused;
  maybe_token_owner <- token_owners[token_id];
  match maybe_token_owner with
  | None =>
    error = TokenNotFoundError;
    Throw error
  | Some token_owner =>
    BurnToken token_id;
    msg_to_sender = {
      _tag: "ZRC6_BurnCallback";
      _recipient: _sender;
      _amount: Uint128 0;
      token_owner: token_owner;
      token_id: token_id
    };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

transition BatchBurn(token_id_list: List Uint256)
  RequireNotPaused;
  forall token_id_list BurnToken;
  msg_to_sender = {
    _tag: "ZRC6_BatchBurnCallback";
    _recipient: _sender;
    _amount: Uint128 0
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition AddMinter(minter: ByStr20)
  RequireContractOwner;
  has_minter <- exists minters[minter];
  match has_minter with
  | True =>
    error = MinterFoundError;
    Throw error
  | False =>
    minters[minter] := true
  end;
  e = {
    _eventname: "AddMinter";
    minter: minter
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_AddMinterCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    minter: minter
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition RemoveMinter(minter: ByStr20)
  RequireContractOwner;
  has_minter <- exists minters[minter];
  match has_minter with
  | False =>
    error = MinterNotFoundError;
    Throw error
  | True =>
    delete minters[minter]
  end;
  e = {
    _eventname: "RemoveMinter";
    minter: minter
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_RemoveMinterCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    minter: minter
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition SetSpender(spender: ByStr20, token_id: Uint256)
  RequireNotSelf spender _sender;

  maybe_token_owner <- token_owners[token_id];
  match maybe_token_owner with
  | None =>
    error = TokenNotFoundError;
    Throw error
  | Some token_owner =>
    RequireOwnerOrOperator token_owner;

    maybe_spender <- spenders[token_id];
    match maybe_spender with
      | None =>
      | Some cur_spender =>
        has_spender = builtin eq cur_spender spender;
        match has_spender with
        | False =>
        | True =>
          error = SpenderFoundError;
          Throw error
        end
    end;

    spenders[token_id] := spender;

    e = {
      _eventname: "SetSpender";
      token_owner: token_owner;
      spender: spender;
      token_id: token_id
    };
    event e;
    msg_to_sender = {
      _tag: "ZRC6_SetSpenderCallback";
      _recipient: _sender;
      _amount: Uint128 0;
      spender: spender;
      token_id: token_id
    };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

transition AddOperator(operator: ByStr20)
  RequireNotSelf operator _sender;

  maybe_bal <- balances[_sender];
  balance = get_bal maybe_bal;

  is_balance_zero = builtin eq zero balance;

  match is_balance_zero with
  | True =>
    error = NotTokenOwnerError;
    Throw error
  | False =>
    has_operator <- exists operators[_sender][operator];
    match has_operator with
    | False =>
      operators[_sender][operator] := true
    | True =>
      error = OperatorFoundError;
      Throw error
    end;
    e = {
      _eventname: "AddOperator";
      token_owner: _sender;
      operator: operator
    };
    event e;
    msg_to_sender = {
      _tag: "ZRC6_AddOperatorCallback";
      _recipient: _sender;
      _amount: Uint128 0;
      operator: operator
    };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

transition RemoveOperator(operator: ByStr20)
  has_operator <- exists operators[_sender][operator];
  match has_operator with
  | False =>
    error = OperatorNotFoundError;
    Throw error
  | True =>
    delete operators[_sender][operator]
  end;
  e = {
    _eventname: "RemoveOperator";
    token_owner: _sender;
    operator: operator
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_RemoveOperatorCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    operator: operator
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition TransferFrom(to: ByStr20, token_id: Uint256)
  RequireNotPaused;
  maybe_token_owner <- token_owners[token_id];
  match maybe_token_owner with
  | None =>
    error = TokenNotFoundError;
    Throw error
  | Some token_owner =>
    TransferToken to token_id;
    msg_to_recipient = {
      _tag: "ZRC6_RecipientAcceptTransferFrom";
      _recipient: to;
      _amount: Uint128 0;
      from: token_owner;
      to: to;
      token_id: token_id
    };
    msg_to_sender = {
      _tag: "ZRC6_TransferFromCallback";
      _recipient: _sender;
      _amount: Uint128 0;
      from: token_owner;
      to: to;
      token_id: token_id
    };
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  end
end

transition BatchTransferFrom(to_token_id_pair_list: List (Pair ByStr20 Uint256))
  RequireNotPaused;
  forall to_token_id_pair_list HandleTransfer;
  msg_to_sender = {
    _tag: "ZRC6_BatchTransferFromCallback";
    _recipient: _sender;
    _amount: Uint128 0
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to _sender;

  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e;
  msg_to_sender = {
    _tag: "ZRC6_SetContractOwnershipRecipientCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    to: to
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _sender recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipientError;
    Throw error
  | True =>
    contract_owner := _sender;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _sender
    };
    event e;
    msg_to_sender = {
      _tag: "ZRC6_AcceptContractOwnershipCallback";
      _recipient: _sender;
      _amount: Uint128 0;
      contract_owner: _sender
    };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end
